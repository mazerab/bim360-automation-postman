{
	"info": {
		"_postman_id": "1ecf69bc-eaf6-4931-8c3d-9ea672b2e659",
		"name": "BIM360 Automation",
		"description": "A collection to document the Forge APIs used to automate tasks in BIM360 Docs.\n\nIt also defines the bearer token that will be passed to subsequent API requests to Forge. ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Two Legged",
					"item": [
						{
							"name": "Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0254a11-a172-44cf-ab4f-56051540688c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"access_token should exist\", function () {",
											"    pm.expect(pm.environment.has('access_token')).to.equal(true);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "208dce4a-7f3a-4792-9d5e-53f04f3bcd81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "The Forge app client ID",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"description": "The Forge app client secret",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{scope}}",
											"description": "The Forge scope",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/authentication/v1/authenticate",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"authentication",
										"v1",
										"authenticate"
									]
								},
								"description": "Endpoint used to request a bearer token"
							},
							"response": []
						}
					],
					"description": "A folder to store all endpoints used for two-legged oAuth flows.",
					"auth": {
						"type": "noauth"
					},
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Three Legged",
					"item": [
						{
							"name": "Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a6a7970-5ba9-46f6-9f26-fde92bdd8bac",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJIUzI1NiIsImtpZCI6Imp3dF9zeW1tZXRyaWNfa2V5In0.eyJzY29wZSI6WyJkYXRhOnJlYWQiLCJkYXRhOmNyZWF0ZSIsImRhdGE6d3JpdGUiXSwiY2xpZW50X2lkIjoiSW8xSHM0T2s1dkVLUFlTbTBPQzVBNGpKQWlDQlRxeDUiLCJncmFudF9pZCI6InlycmZ2aHptU3NaNXVxcG52bFZ6QWJmVHQycHlMOTE0IiwiYXVkIjoiaHR0cHM6Ly9hdXRvZGVzay5jb20vYXVkL2p3dGV4cDYwIiwianRpIjoiQzA1NmVmblc4RWwweGViRGxvdGk1VE10anNnNklsUzR0em9rdjljdFZwdWZidjRjbU1Rb1JUeldFSnRsSmdQMCIsInVzZXJpZCI6IktBUURNNjJUNlJVUiIsImV4cCI6MTU5MTg5MTA0MH0.IZKvUCPSNJOWp5mcONg1Y0Qpz8DrZNDAAgpC4cOnY9A",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/userprofile/v1/users/@me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"userprofile",
										"v1",
										"users",
										"@me"
									]
								}
							},
							"response": []
						}
					],
					"description": "A folder to store all endpoints used for two-legged oAuth flows.",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5b4c5c30-346e-4e45-ad58-8562b124eae4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d395c0d-ea48-4cbf-b175-aebf8f50ec30",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "A folder to stores all the endpoints that pertain to authentication with the Forge platform.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "94cdc202-48e7-4acd-a6e8-f9e811898183",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d0bbf416-862e-42fb-9f58-c1b0bb20657a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Downloads",
			"item": [
				{
					"name": "Hubs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89f18cdc-4a7d-4616-9dd4-8f217e05504d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"hub_id should exist\", function () {",
									"    pm.expect(pm.environment.has('hub_id')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"hub_id\", jsonData.data[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hub",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9288288-fec4-4288-87b9-2efee8fed0a4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('hub_id should exist', function () {",
									"    pm.expect(pm.environment.has('hub_id')).to.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id"
							],
							"variable": [
								{
									"key": "hub_id",
									"value": "{{hub_id}}",
									"type": "string"
								}
							]
						},
						"description": "Retrieves the metadata of a specific hub"
					},
					"response": []
				},
				{
					"name": "Hub Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2488543f-9637-406a-9055-6420fa926ec6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('project_id should exist', function () {",
									"    pm.expect(pm.environment.has('project_id')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"project_id\", jsonData.data[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{x_user_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects"
							],
							"variable": [
								{
									"key": "hub_id",
									"value": "{{hub_id}}",
									"type": "string"
								}
							]
						},
						"description": "Retrieves the hub projects."
					},
					"response": []
				},
				{
					"name": "Project Top Folders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0aa635d0-4783-4457-a763-c9cb8f761e45",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"project_files_folder_id should exist\", function () {",
									"    pm.expect(pm.environment.has('project_files_folder_id')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(folder) {",
									"        pm.environment.set(\"project_files_folder_id\", folder.id);",
									"        return folder.attributes.name === 'Project Files';",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{x_user_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects/:project_id/topFolders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects",
								":project_id",
								"topFolders"
							],
							"variable": [
								{
									"key": "hub_id",
									"value": "{{hub_id}}",
									"type": "string"
								},
								{
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								}
							]
						},
						"description": "Retrieves the project top folders."
					},
					"response": []
				},
				{
					"name": "Project Files Folder Contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc758f71-4352-40ae-9489-275440ea19b3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"arch_folder_id and arch_folder_name should exist\", function () {",
									"    pm.expect(pm.environment.has(\"arch_folder_id\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"arch_folder_name\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(folder) {",
									"        pm.environment.set(\"arch_folder_id\", folder.id);",
									"        return folder.attributes.name === pm.environment.get(\"arch_folder_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/folders/:folder_id/contents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"folders",
								":folder_id",
								"contents"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								},
								{
									"key": "folder_id",
									"value": "{{project_files_folder_id}}",
									"type": "string"
								}
							]
						},
						"description": "Retrieves the Project Files folder contents."
					},
					"response": []
				},
				{
					"name": "Project Folder Contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6641c064-f775-4451-8c45-2105dd898f6f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"arch_model_object_id should exist\", function () {",
									"    pm.expect(pm.environment.has(\"arch_file_name\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"arch_model_object_id\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.included.some(function(version) {",
									"        pm.environment.set(\"arch_model_object_id\", version.relationships.storage.data.id);",
									"        pm.environment.set(\"arch_model_version_id\", version.id);",
									"        return version.attributes.name === pm.environment.get(\"arch_file_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{x_user_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/folders/:folder_id/contents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"folders",
								":folder_id",
								"contents"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								},
								{
									"key": "folder_id",
									"value": "{{arch_folder_id}}",
									"type": "string"
								}
							]
						},
						"description": "Retrieves a folder contents."
					},
					"response": []
				},
				{
					"name": "Download File",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5534012c-6351-4fbb-b617-5ce9c7ca3c2b",
								"exec": [
									"var objectId = pm.environment.get(\"arch_model_object_id\");",
									"var object = objectId.split(\"/\");",
									"var objectName = object[1];",
									"pm.environment.set(\"arch_model_object_name\", objectName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e114694e-4699-47f6-a464-f29231443b07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/oss/v2/buckets/:bucket_key/objects/:object_name",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"oss",
								"v2",
								"buckets",
								":bucket_key",
								"objects",
								":object_name"
							],
							"variable": [
								{
									"key": "bucket_key",
									"value": "{{bucket_key}}",
									"type": "string"
								},
								{
									"key": "object_name",
									"value": "{{arch_model_object_name}}",
									"type": "string"
								}
							]
						},
						"description": "Initiate a download of a file."
					},
					"response": []
				}
			],
			"description": "Collection of endpoints needed to successfully download a file from BIM360 Docs.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "446c59c6-806f-4875-9c91-a050e087bc5e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dbd0e827-7325-40dc-aaaa-44d711899db3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Uploads",
			"item": [
				{
					"name": "Hubs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89f18cdc-4a7d-4616-9dd4-8f217e05504d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							]
						},
						"description": "Retrieves the hubs."
					},
					"response": []
				},
				{
					"name": "Hub",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9288288-fec4-4288-87b9-2efee8fed0a4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id"
							],
							"variable": [
								{
									"id": "9f74ce8e-8ce3-47dd-aae8-21424b1943d8",
									"key": "hub_id",
									"value": "{{hub_id}}",
									"type": "string"
								}
							]
						},
						"description": "Retrieves the metadata of a specific hub."
					},
					"response": []
				},
				{
					"name": "Hub Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2488543f-9637-406a-9055-6420fa926ec6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{x_user_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects"
							],
							"variable": [
								{
									"id": "62bf7043-39df-4849-ac37-6a0ebe6f55b1",
									"key": "hub_id",
									"value": "{{hub_id}}",
									"type": "string"
								}
							]
						},
						"description": "Retrieves the hub projects."
					},
					"response": []
				},
				{
					"name": "Project Top Folders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0aa635d0-4783-4457-a763-c9cb8f761e45",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{x_user_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects/:project_id/topFolders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects",
								":project_id",
								"topFolders"
							],
							"variable": [
								{
									"id": "c5c9ebf1-252a-4b2e-b85b-9029b0f05e96",
									"key": "hub_id",
									"value": "{{hub_id}}",
									"type": "string"
								},
								{
									"id": "42580f55-7507-433d-aa07-ebbc719d8955",
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								}
							]
						},
						"description": "Retrieves the project top folders."
					},
					"response": []
				},
				{
					"name": "Project Files Folder Contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc758f71-4352-40ae-9489-275440ea19b3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"mep_folder_id should exist\", function () {",
									"    pm.expect(pm.environment.has(\"mep_folder_id\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(folder) {",
									"        pm.environment.set(\"mep_folder_id\", folder.id);",
									"        return folder.attributes.name === 'MEP';",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/folders/:folder_id/contents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"folders",
								":folder_id",
								"contents"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								},
								{
									"key": "folder_id",
									"value": "{{project_files_folder_id}}",
									"type": "string"
								}
							]
						},
						"description": "Retrieves the Project Files folders."
					},
					"response": []
				},
				{
					"name": "Project Folder Contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ea6730b-a772-485b-982d-a077c7b0a4f2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"arch_model_object_id should exist\", function () {",
									"    pm.expect(pm.environment.has(\"arch_model_object_id\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.included.some(function(version) {",
									"        pm.environment.set(\"arch_model_object_id\", version.relationships.storage.data.id);",
									"        pm.environment.set(\"arch_model_version_id\", version.id);",
									"        return version.attributes.name === 'Arch-01.rvt';",
									"    });",
									"});",
									"",
									"pm.test(\"version urn links should exist\", function () {",
									"    pm.expect(pm.environment.has(\"version_urn_arch\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"version_urn_ffe\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"version_urn_struct\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.included.some(function(version) {",
									"        if (version.attributes.name === 'Arch-01.rvt') {",
									"            pm.environment.set(\"version_urn_arch\", version.id);",
									"        }",
									"        if (version.attributes.name === 'FFE-01.rvt') {",
									"            pm.environment.set(\"version_urn_ffe\", version.id);",
									"        }",
									"        if (version.attributes.name === 'Struct-01.rvt') {",
									"            pm.environment.set(\"version_urn_struct\", version.id);",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{x_user_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/folders/:folder_id/contents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"folders",
								":folder_id",
								"contents"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								},
								{
									"key": "folder_id",
									"value": "{{arch_folder_id}}",
									"type": "string"
								}
							]
						},
						"description": "Retrieves a folder contents."
					},
					"response": []
				},
				{
					"name": "Create Storage Location (First Version)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "baa4fdc1-7a75-499b-881d-6a8b7d71c762",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"mep_model_object_id\", jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonapi\": {\n        \"version\": \"1.0\"\n    },\n    \"data\": {\n        \"type\": \"objects\",\n        \"attributes\": {\n            \"name\": \"{{mep_file_name}}\"\n        },\n        \"relationships\": {\n            \"target\": {\n                \"data\": {\n                    \"type\": \"folders\",\n                    \"id\": \"{{mep_folder_id}}\"\n                }\n            }\n        }\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/storage",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"storage"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								}
							]
						},
						"description": "Creates a new storage location to upload a new file to."
					},
					"response": []
				},
				{
					"name": "Upload File (First Version)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6b657e12-f3df-4879-8d04-a5ba0a3717fd",
								"exec": [
									"var objectId = pm.environment.get(\"mep_model_object_id\");",
									"var object = objectId.split(\"/\");",
									"var objectName = object[1];",
									"pm.environment.set(\"mep_model_object_name\", objectName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6841dd14-80d0-4923-abac-2841f28e4fb3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "{{mep_file_name}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/mazerab/Downloads/Martins Test Project/MEP-01.rvt"
							},
							"options": {
								"file": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/oss/v2/buckets/:bucket_key/objects/:object_name",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"oss",
								"v2",
								"buckets",
								":bucket_key",
								"objects",
								":object_name"
							],
							"variable": [
								{
									"key": "bucket_key",
									"value": "{{bucket_key}}",
									"type": "string"
								},
								{
									"key": "object_name",
									"value": "{{mep_model_object_name}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create First Version",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a7e539c-233e-47cc-b375-3e84d3cbf4f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "901feaba-14cf-46c7-b0b6-ed2e136dd0b6",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"mep_model_item_id should exist\", function () {",
									"    pm.expect(pm.environment.has(\"mep_model_item_id\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"mep_model_item_id\", jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.api+json"
							},
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonapi\": { \n        \"version\": \"1.0\"\n    },\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"displayName\": \"{{mep_file_name}}\",\n            \"extension\": {\n                \"type\": \"items:autodesk.bim360:File\",\n                \"version\": \"1.0\"\n            }\n        },\n        \"relationships\": {\n            \"tip\": {\n                \"data\": {\n                    \"type\": \"versions\",\n                    \"id\": \"1\"\n                }\n            },\n            \"parent\": {\n                \"data\": {\n                    \"type\": \"folders\",\n                    \"id\": \"{{mep_folder_id}}\"\n                }\n            }\n        }\n    },\n    \"included\": [\n        {\n            \"type\": \"versions\",\n            \"id\": \"1\",\n            \"attributes\": {\n                \"name\": \"{{mep_file_name}}\",\n                \"extension\": {\n                    \"type\": \"versions:autodesk.bim360:File\",\n                    \"version\": \"1.0\"\n                }\n            },\n            \"relationships\": {\n                \"storage\": {\n                    \"data\": {\n                        \"type\": \"objects\",\n                        \"id\": \"{{mep_model_object_id}}\"\n                    }\n                }\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"items"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Storage Location (Second Version)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b207f326-510b-43cf-8f8d-74b719d81191",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"mep_model_v2_object_id\", jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonapi\": {\n        \"version\": \"1.0\"\n    },\n    \"data\": {\n        \"type\": \"objects\",\n        \"attributes\": {\n            \"name\": \"{{mep_file_name}}\"\n        },\n        \"relationships\": {\n            \"target\": {\n                \"data\": {\n                    \"type\": \"folders\",\n                    \"id\": \"{{mep_folder_id}}\"\n                }\n            }\n        }\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/storage",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"storage"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								}
							]
						},
						"description": "Creates a new storage location to upload a new file to."
					},
					"response": []
				},
				{
					"name": "Upload File (Second Version)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc4a92c4-2137-4845-9fab-d4c8a2b5043d",
								"exec": [
									"var objectId = pm.environment.get(\"mep_model_v2_object_id\");",
									"var object = objectId.split(\"/\");",
									"var objectName = object[1];",
									"pm.environment.set(\"mep_model_v2_object_name\", objectName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8e3d1816-605e-4f95-9478-354ffde1998c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "{{mep_file_name}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/mazerab/Downloads/Martins Test Project/MEP-01.rvt"
							},
							"options": {
								"file": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/oss/v2/buckets/:bucket_key/objects/:object_name",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"oss",
								"v2",
								"buckets",
								":bucket_key",
								"objects",
								":object_name"
							],
							"variable": [
								{
									"key": "bucket_key",
									"value": "{{bucket_key}}",
									"type": "string"
								},
								{
									"key": "object_name",
									"value": "{{mep_model_v2_object_name}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Second Version With Refs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74dcf2f4-576b-489d-88be-6cfb2dfe0cf1",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29081d2a-baa5-4ba1-b28e-e9929cc436b8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.api+json"
							},
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonapi\": { \n        \"version\": \"1.0\" \n    },\n    \"data\": {\n        \"type\": \"versions\",\n        \"attributes\": {\n            \"name\": \"{{mep_file_name}}\",\n            \"extension\": { \n                \"type\": \"versions:autodesk.bim360:File\", \n                \"version\": \"1.0\"\n            }\n        },\n        \"relationships\": {\n            \"item\": { \n                \"data\": { \n                    \"type\": \"items\", \n                    \"id\": \"{{mep_model_item_id}}\"\n                }\n            },\n            \"storage\": { \n                \"data\": { \n                    \"type\": \"objects\",\n                    \"id\": \"{{mep_model_v2_object_id}}\"\n                }\n            },\n            \"refs\": {\n                \"data\": [\n                    {\n                        \"type\": \"versions\",\n                        \"id\": \"{{version_urn_arch}}\",\n                        \"meta\": {\n                            \"refType\": \"xrefs\",\n                            \"direction\": \"from\",\n                            \"extension\": {\n                                \"type\": \"xrefs:autodesk.core:Xref\",\n                                \"version\": \"1.1\",\n                                \"data\": {\n                                    \"nestedType\": \"overlay\"\n                                }\n                            }\n                        }\n                    },{\n                        \"type\": \"versions\",\n                        \"id\": \"{{version_urn_ffe}}\",\n                        \"meta\": {\n                            \"refType\": \"xrefs\",\n                            \"direction\": \"from\",\n                            \"extension\": {\n                                \"type\": \"xrefs:autodesk.core:Xref\",\n                                \"version\": \"1.1\",\n                                \"data\": {\n                                    \"nestedType\": \"overlay\"\n                                }\n                            }\n                        }\n                    },{\n                        \"type\": \"versions\",\n                        \"id\": \"{{version_urn_struct}}\",\n                        \"meta\": {\n                            \"refType\": \"xrefs\",\n                            \"direction\": \"from\",\n                            \"extension\": {\n                                \"type\": \"xrefs:autodesk.core:Xref\",\n                                \"version\": \"1.1\",\n                                \"data\": {\n                                    \"nestedType\": \"overlay\"\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/versions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"versions"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								}
							]
						},
						"description": "This endpoint creates a new version with relationships refs included.\n\nThis method is not preferred, one should use the new copyFrom feature instead."
					},
					"response": []
				}
			],
			"description": "Collection of endpoints needed to successfully upload a file to BIM360 Docs.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "75fe2d90-41a0-475b-806e-464f2c496b99",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dc15f092-93a8-4b99-ac9a-e07f678b6db8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Project Setup",
			"item": [
				{
					"name": "Business Units",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2874c9a2-8fe7-45bd-8b4a-cb3ea0c17d7d",
								"exec": [
									"var account_id = pm.environment.get(\"hub_id\");",
									"account_id = account_id.replace(\"b.\", \"\");",
									"pm.environment.set(\"account_id\", account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fee69df9-a27c-4681-b9a1-746b75568488",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"business_unit_id should exist\", function () {",
									"    pm.expect(pm.environment.has(\"business_unit_id\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"business_unit_id\", jsonData.business_units[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/hq/v1/accounts/:account_id/business_units_structure",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"hq",
								"v1",
								"accounts",
								":account_id",
								"business_units_structure"
							],
							"variable": [
								{
									"key": "account_id",
									"value": "{{account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Business Units (EU)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2874c9a2-8fe7-45bd-8b4a-cb3ea0c17d7d",
								"exec": [
									"var account_id = pm.environment.get(\"hub_id\");",
									"account_id = account_id.replace(\"b.\", \"\");",
									"pm.environment.set(\"account_id\", account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fee69df9-a27c-4681-b9a1-746b75568488",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"business_unit_id should exist\", function () {",
									"    pm.expect(pm.environment.has(\"business_unit_id\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"business_unit_id\", jsonData.business_units[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/hq/v1/regions/eu/accounts/:account_id/business_units_structure",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"hq",
								"v1",
								"regions",
								"eu",
								"accounts",
								":account_id",
								"business_units_structure"
							],
							"variable": [
								{
									"key": "account_id",
									"value": "{{account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5dddb608-973f-40c1-93cd-5540296bd084",
								"exec": [
									"var account_id = pm.environment.get(\"hub_id\");",
									"account_id = account_id.replace(\"b.\", \"\");",
									"pm.environment.set(\"account_id\", account_id);",
									"",
									"var construction_type = pm.environment.get(\"construction_type\");",
									"var construction_types = [\"New Construction\", \"Renovation\"];",
									"if (!construction_types.includes(construction_type)) {",
									"    throw new Error(\"unknown construction type\");",
									"}",
									"",
									"var contract_type = pm.environment.get(\"contract_type\");",
									"var contract_types = [\"Construction Management (CM) at Risk\", \"Design-Bid\", \"Design-Bid-Build\", \"Design-Build-Operate\", \"IPD\"];",
									"if (!contract_types.includes(contract_type)) {",
									"    throw new Error(\"unknown contract type\");",
									"}",
									"",
									"var currency = pm.environment.get(\"currency\");",
									"var currencies = [\"USD\", \"AUD\", \"CAD\", \"EUR\", \"GBP\", \"ALL\", \"AZN\", \"BYR\", \"BRL\", \"BGN\",\"CNY\", \"HRK\", \"CZK\", \"DKK\", \"EEK\",\"HKD\", \"HUF\", \"ISK\", \"INR\", \"IRR\", \"ILS\", \"JPY\", \"KZT\", \"KRW\",\"KPW\", \"KGS\", \"LVL\", \"LTL\", \"MKD\", \"MNT\", \"ANG\", \"NOK\", \"PKR\", \"PLN\", \"RON\", \"RUB\", \"SAR\", \"RSD\", \"SGD\", \"ZAR\", \"SEK\", \"CHF\", \"TWD\", \"TRL\", \"UAH\", \"UZS\", \"YER\", \"PHP\", \"NZD\"];",
									"if (!currencies.includes(currency)) {",
									"    throw new Error(\"unknown currency\");",
									"}",
									"",
									"var project_type = pm.environment.get(\"project_type\");",
									"var project_types = [\"Commercial\", \"Convention Center\", \"Data Center\", \"Hotel / Motel\", \"Office\", \"Parking Structure / Garage\", \"Performing Arts\", \"Retail\", \"Stadium/Arena\", \"Theme Park\", \"Warehouse (non-manufacturing)\", \"Healthcare\", \"Assisted Living / Nursing Home\", \"Hospital\", \"Medical Laboratory\", \"Medical Office\", \"OutPatient Surgery Center\", \"Institutional\", \"Court House\", \"Dormitory\", \"Education Facility\", \"Government Building\", \"Library\", \"Military Facility\", \"Museum\", \"Prison / Correctional Facility\", \"Recreation Building\", \"Religious Building\", \"Research Facility / Laboratory\", \"Residential\", \"Multi-Family Housing\", \"Single-Family Housing\", \"Infrastructure\", \"Airport\", \"Bridge\", \"Canal / Waterway\", \"Dams / Flood Control / Reservoirs\", \"Harbor / River Development\", \"Rail\", \"Seaport\", \"Streets / Roads / Highways\", \"Transportation Building\", \"Tunnel\", \"Waste Water / Sewers\", \"Water Supply\", \"Industrial & Energy\", \"Manufacturing / Factory\", \"Oil & Gas\", \"Plant\", \"Power Plant\", \"Solar Far\", \"Utilities\", \"Wind Farm\", \"Sample Projects\", \"Demonstration Project\", \"Template Project\", \"Training Project\"];",
									"if (!project_types.includes(project_type)) {",
									"    throw new Error(\"unknown project type\");",
									"}",
									"",
									"var service_type = pm.environment.get(\"service_type\");",
									"var service_types = [\"field\", \"glue\", \"schedule\", \"plan\", \"doc_manager\"];",
									"if (!service_types.includes(service_type)) {",
									"    throw new Error(\"unknown service type\");",
									"}",
									"",
									"var timezone = pm.environment.get(\"timezone\");",
									"var timezones = [\"Pacific/Honolulu\", \"America/Juneau\", \"America/Los_Angeles\", \"America/Phoenix\", \"America/Denver\", \"America/Chicago\", \"America/New_York\", \"America/Indiana/Indianapolis\", \"Pacific/Pago_Pago\", \"Pacific/Midway\", \"America/Tijuana\", \"America/Chihuahua\", \"America/Mazatlan\", \"America/Guatemala\", \"America/Mexico_City\", \"America/Monterrey\", \"America/Regina\", \"America/Bogota\", \"America/Lima\", \"America/Caracas\", \"America/Halifax\", \"America/Guyana\", \"America/La_Paz\", \"America/Santiago\", \"America/St_Johns\", \"America/Sao_Paulo\", \"America/Argentina/Buenos_Aires\", \"America/Godthab\", \"Atlantic/South_Georgia\", \"Atlantic/Azores\", \"Atlantic/Cape_Verde\", \"Africa/Casablanca\", \"Europe/Dublin\", \"Europe/Lisbon\", \"Europe/London\", \"Africa/Monrovia\", \"ETC/UTC\", \"Europe/Amsterdam\", \"Europe/Belgrade\", \"Europe/Berlin\", \"Europe/Bratislava\", \"Europe/Brussels\", \"Europe/Budapest\", \"Europe/Copenhagen\", \"Europe/Ljubljana\", \"Europe/Madrid\", \"Europe/Paris\", \"Europe/Prague\", \"Europe/Rome\", \"Europe/Sarajevo\", \"Europe/Skopje\", \"Europe/Stockholm\", \"Europe/Vienna\", \"Europe/Warsaw\", \"Africa/Algiers\", \"Europe/Zagreb\", \"Europe/Athens\", \"Europe/Bucharest\", \"Africa/Cairo\", \"Africa/Harare\", \"Europe/Helsinki\", \"Europe/Istanbul\", \"Asia/Jerusalem\", \"Europe/Kiev\", \"Africa/Johannesburg\", \"Europe/Riga\", \"Europe/Sofia\", \"Europe/Tallinn\", \"Europe/Vilnius\", \"Asia/Baghdad\", \"Asia/Kuwait\", \"Europe/Minsk\", \"Africa/Nairobi\", \"Asia/Riyadh\", \"Asia/Tehran\", \"Asia/Muscat\", \"Asia/Baku\", \"Europe/Moscow\", \"Asia/Tbilisi\", \"Asia/Yerevan\", \"Asia/Kabul\", \"Asia/Karachi\", \"Asia/Tashkent\", \"Asia/Kolkata\", \"Asia/Colombo\", \"Asia/Kathmandu\", \"Asia/Almaty\", \"Asia/Dhaka\", \"Asia/Yekaterinburg\", \"Asia/Rangoon\", \"Asia/Bangkok\", \"Asia/Jakarta\", \"Asia/Novosibirsk\", \"Asia/Shanghai\", \"Asia/Chongqing\", \"Asia/Hong_Kong\", \"Asia/Krasnoyarsk\", \"Asia/Kuala_Lumpur\", \"Australia/Perth\", \"Asia/Singapore\", \"Asia/Taipei\", \"Asia/Ulaanbaatar\", \"Asia/Urumqi\", \"Asia/Irkutsk\",\"Asia/Tokyo\", \"Asia/Seoul\", \"Australia/Adelaide\", \"Australia/Darwin\", \"Australia/Brisbane\", \"Australia/Melbourne\", \"Pacific/Guam\", \"Australia/Hobart\", \"Pacific/Port_Moresby\", \"Australia/Sydney\", \"Asia/Yakutsk\", \"Pacific/Noumea\", \"Asia/Vladivostok\", \"Pacific/Auckland\", \"Pacific/Fiji\", \"Asia/Kamchatka\", \"Asia/Magadan\", \"Pacific/Majurov\", \"Pacific/Guadalcanal\", \"Pacific/Tongatapu\", \"Pacific/Apia\", \"Pacific/Fakaofo\"];",
									"if (!timezones.includes(timezone)) {",
									"    throw new Error(\"unknown timezone\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0e1d1a1f-422a-4b47-a622-98ea46de5cb1",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"construction_project\",\n    \"service_types\": \"{{service_type}}\",\n    \"start_date\": \"2015-05-02\",\n    \"end_date\": \"2016-04-03\",\n    \"project_type\": \"{{project_type}}\",\n    \"value\": 3000,\n    \"currency\": \"{{currency}}\",\n    \"job_number\": \"0219-01\",\n    \"address_line_1\": \"The Fifth Avenue\",\n    \"address_line_2\": \"#301\",\n    \"city\": \"New York\",\n    \"state_or_province\": \"New York\",\n    \"postal_code\": \"10011\",\n    \"country\": \"United States\",\n    \"business_unit_id\": \"{{business_unit_id}}\",\n    \"timezone\": \"{{timezone}}\",\n    \"language\": \"en\",\n    \"construction_type\": \"{{construction_type}}\",\n    \"contract_type\": \"{{contract_type}}\",\n    \"template_project_id\": \"{{project_id}}\",\n    \"include_companies\": \"true\",\n    \"include_locations\": \"false\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/hq/v1/accounts/:account_id/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"hq",
								"v1",
								"accounts",
								":account_id",
								"projects"
							],
							"variable": [
								{
									"key": "account_id",
									"value": "{{account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project (EU)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e744005-ab8c-4c2c-ac61-505d90e1bd53",
								"exec": [
									"var account_id = pm.environment.get(\"hub_id\");",
									"account_id = account_id.replace(\"b.\", \"\");",
									"pm.environment.set(\"account_id\", account_id);",
									"",
									"var construction_type = pm.environment.get(\"construction_type\");",
									"var construction_types = [\"New Construction\", \"Renovation\"];",
									"if (!construction_types.includes(construction_type)) {",
									"    throw new Error(\"unknown construction type\");",
									"}",
									"",
									"var contract_type = pm.environment.get(\"contract_type\");",
									"var contract_types = [\"Construction Management (CM) at Risk\", \"Design-Bid\", \"Design-Bid-Build\", \"Design-Build-Operate\", \"IPD\"];",
									"if (!contract_types.includes(contract_type)) {",
									"    throw new Error(\"unknown contract type\");",
									"}",
									"",
									"var currency = pm.environment.get(\"currency\");",
									"var currencies = [\"USD\", \"AUD\", \"CAD\", \"EUR\", \"GBP\", \"ALL\", \"AZN\", \"BYR\", \"BRL\", \"BGN\",\"CNY\", \"HRK\", \"CZK\", \"DKK\", \"EEK\",\"HKD\", \"HUF\", \"ISK\", \"INR\", \"IRR\", \"ILS\", \"JPY\", \"KZT\", \"KRW\",\"KPW\", \"KGS\", \"LVL\", \"LTL\", \"MKD\", \"MNT\", \"ANG\", \"NOK\", \"PKR\", \"PLN\", \"RON\", \"RUB\", \"SAR\", \"RSD\", \"SGD\", \"ZAR\", \"SEK\", \"CHF\", \"TWD\", \"TRL\", \"UAH\", \"UZS\", \"YER\", \"PHP\", \"NZD\"];",
									"if (!currencies.includes(currency)) {",
									"    throw new Error(\"unknown currency\");",
									"}",
									"",
									"var project_type = pm.environment.get(\"project_type\");",
									"var project_types = [\"Commercial\", \"Convention Center\", \"Data Center\", \"Hotel / Motel\", \"Office\", \"Parking Structure / Garage\", \"Performing Arts\", \"Retail\", \"Stadium/Arena\", \"Theme Park\", \"Warehouse (non-manufacturing)\", \"Healthcare\", \"Assisted Living / Nursing Home\", \"Hospital\", \"Medical Laboratory\", \"Medical Office\", \"OutPatient Surgery Center\", \"Institutional\", \"Court House\", \"Dormitory\", \"Education Facility\", \"Government Building\", \"Library\", \"Military Facility\", \"Museum\", \"Prison / Correctional Facility\", \"Recreation Building\", \"Religious Building\", \"Research Facility / Laboratory\", \"Residential\", \"Multi-Family Housing\", \"Single-Family Housing\", \"Infrastructure\", \"Airport\", \"Bridge\", \"Canal / Waterway\", \"Dams / Flood Control / Reservoirs\", \"Harbor / River Development\", \"Rail\", \"Seaport\", \"Streets / Roads / Highways\", \"Transportation Building\", \"Tunnel\", \"Waste Water / Sewers\", \"Water Supply\", \"Industrial & Energy\", \"Manufacturing / Factory\", \"Oil & Gas\", \"Plant\", \"Power Plant\", \"Solar Far\", \"Utilities\", \"Wind Farm\", \"Sample Projects\", \"Demonstration Project\", \"Template Project\", \"Training Project\"];",
									"if (!project_types.includes(project_type)) {",
									"    throw new Error(\"unknown project type\");",
									"}",
									"",
									"var service_type = pm.environment.get(\"service_type\");",
									"var service_types = [\"field\", \"glue\", \"schedule\", \"plan\", \"doc_manager\"];",
									"if (!service_types.includes(service_type)) {",
									"    throw new Error(\"unknown service type\");",
									"}",
									"",
									"var timezone = pm.environment.get(\"timezone\");",
									"var timezones = [\"Pacific/Honolulu\", \"America/Juneau\", \"America/Los_Angeles\", \"America/Phoenix\", \"America/Denver\", \"America/Chicago\", \"America/New_York\", \"America/Indiana/Indianapolis\", \"Pacific/Pago_Pago\", \"Pacific/Midway\", \"America/Tijuana\", \"America/Chihuahua\", \"America/Mazatlan\", \"America/Guatemala\", \"America/Mexico_City\", \"America/Monterrey\", \"America/Regina\", \"America/Bogota\", \"America/Lima\", \"America/Caracas\", \"America/Halifax\", \"America/Guyana\", \"America/La_Paz\", \"America/Santiago\", \"America/St_Johns\", \"America/Sao_Paulo\", \"America/Argentina/Buenos_Aires\", \"America/Godthab\", \"Atlantic/South_Georgia\", \"Atlantic/Azores\", \"Atlantic/Cape_Verde\", \"Africa/Casablanca\", \"Europe/Dublin\", \"Europe/Lisbon\", \"Europe/London\", \"Africa/Monrovia\", \"ETC/UTC\", \"Europe/Amsterdam\", \"Europe/Belgrade\", \"Europe/Berlin\", \"Europe/Bratislava\", \"Europe/Brussels\", \"Europe/Budapest\", \"Europe/Copenhagen\", \"Europe/Ljubljana\", \"Europe/Madrid\", \"Europe/Paris\", \"Europe/Prague\", \"Europe/Rome\", \"Europe/Sarajevo\", \"Europe/Skopje\", \"Europe/Stockholm\", \"Europe/Vienna\", \"Europe/Warsaw\", \"Africa/Algiers\", \"Europe/Zagreb\", \"Europe/Athens\", \"Europe/Bucharest\", \"Africa/Cairo\", \"Africa/Harare\", \"Europe/Helsinki\", \"Europe/Istanbul\", \"Asia/Jerusalem\", \"Europe/Kiev\", \"Africa/Johannesburg\", \"Europe/Riga\", \"Europe/Sofia\", \"Europe/Tallinn\", \"Europe/Vilnius\", \"Asia/Baghdad\", \"Asia/Kuwait\", \"Europe/Minsk\", \"Africa/Nairobi\", \"Asia/Riyadh\", \"Asia/Tehran\", \"Asia/Muscat\", \"Asia/Baku\", \"Europe/Moscow\", \"Asia/Tbilisi\", \"Asia/Yerevan\", \"Asia/Kabul\", \"Asia/Karachi\", \"Asia/Tashkent\", \"Asia/Kolkata\", \"Asia/Colombo\", \"Asia/Kathmandu\", \"Asia/Almaty\", \"Asia/Dhaka\", \"Asia/Yekaterinburg\", \"Asia/Rangoon\", \"Asia/Bangkok\", \"Asia/Jakarta\", \"Asia/Novosibirsk\", \"Asia/Shanghai\", \"Asia/Chongqing\", \"Asia/Hong_Kong\", \"Asia/Krasnoyarsk\", \"Asia/Kuala_Lumpur\", \"Australia/Perth\", \"Asia/Singapore\", \"Asia/Taipei\", \"Asia/Ulaanbaatar\", \"Asia/Urumqi\", \"Asia/Irkutsk\",\"Asia/Tokyo\", \"Asia/Seoul\", \"Australia/Adelaide\", \"Australia/Darwin\", \"Australia/Brisbane\", \"Australia/Melbourne\", \"Pacific/Guam\", \"Australia/Hobart\", \"Pacific/Port_Moresby\", \"Australia/Sydney\", \"Asia/Yakutsk\", \"Pacific/Noumea\", \"Asia/Vladivostok\", \"Pacific/Auckland\", \"Pacific/Fiji\", \"Asia/Kamchatka\", \"Asia/Magadan\", \"Pacific/Majurov\", \"Pacific/Guadalcanal\", \"Pacific/Tongatapu\", \"Pacific/Apia\", \"Pacific/Fakaofo\"];",
									"if (!timezones.includes(timezone)) {",
									"    throw new Error(\"unknown timezone\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "19c5371a-39ec-4cfa-bc63-9f507704a9a4",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"construction_project\",\n    \"service_types\": \"{{service_type}}\",\n    \"start_date\": \"2015-05-02\",\n    \"end_date\": \"2016-04-03\",\n    \"project_type\": \"{{project_type}}\",\n    \"value\": 3000,\n    \"currency\": \"{{currency}}\",\n    \"job_number\": \"0219-01\",\n    \"address_line_1\": \"The Fifth Avenue\",\n    \"address_line_2\": \"#301\",\n    \"city\": \"New York\",\n    \"state_or_province\": \"New York\",\n    \"postal_code\": \"10011\",\n    \"country\": \"United States\",\n    \"business_unit_id\": \"{{business_unit_id}}\",\n    \"timezone\": \"{{timezone}}\",\n    \"language\": \"en\",\n    \"construction_type\": \"{{construction_type}}\",\n    \"contract_type\": \"{{contract_type}}\",\n    \"template_project_id\": \"{{project_id}}\",\n    \"include_companies\": \"true\",\n    \"include_locations\": \"false\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/hq/v1/regions/eu/accounts/:account_id/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"hq",
								"v1",
								"regions",
								"eu",
								"accounts",
								":account_id",
								"projects"
							],
							"variable": [
								{
									"key": "account_id",
									"value": "{{account_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Relationships",
			"item": [
				{
					"name": "Relationships Refs (Arch v1 model)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a4813182-31fb-4e83-804c-097b2110af65",
								"exec": [
									"var encoded = encodeURIComponent(postman.getEnvironmentVariable(\"arch_model_version_id\"));",
									"postman.setEnvironmentVariable(\"encoded_arch_model_version_id\", encoded);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "33a7a1a2-cc49-413e-a5bf-45e501c7fca9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/versions/:version_id/relationships/refs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"versions",
								":version_id",
								"relationships",
								"refs"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								},
								{
									"key": "version_id",
									"value": "{{encoded_arch_model_version_id}}",
									"type": "string"
								}
							]
						},
						"description": "This endpoint is used to retrieve custom relationship references for a specific item version. \n\nThe response contains a data array of versions for each reference found."
					},
					"response": []
				},
				{
					"name": "Relationships Refs (MEP v2 model) (Work In Progress)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a887ac7-05d0-4408-b24f-c3fd1806d276",
								"exec": [
									"var encoded = encodeURIComponent(postman.getEnvironmentVariable(\"mep_model_version_id\"));",
									"postman.setEnvironmentVariable(\"encoded_mep_model_version_id\", encoded);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3886b9d6-28d8-47a6-ab77-7985e4de7d63",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/versions/:version_id/relationships/refs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"versions",
								":version_id",
								"relationships",
								"refs"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}",
									"type": "string"
								},
								{
									"key": "version_id",
									"value": "{{encoded_mep_model_version_id}}",
									"type": "string"
								}
							]
						},
						"description": "This endpoint is used to retrieve custom relationship references for a specific item version. \n\nThe response contains a data array of versions for each reference found."
					},
					"response": []
				}
			],
			"description": "Collection of endpoints to successfully retrieve custom relationships data in BIM360 Docs.",
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d2d90eb1-88f0-4824-9d7f-f01d66b38637",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7eb5e263-3ab3-4bc2-8345-0c565974ba5b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}