{
	"info": {
		"_postman_id": "cbfaab8d-f456-47fd-9d1f-29b8cafbfea9",
		"name": "BIM360 Automation",
		"description": "A collection to document the Forge APIs used to automate tasks in BIM360 Docs.\n\nIt also defines the bearer token that will be passed to subsequent API requests to Forge. ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Two Legged",
					"item": [
						{
							"name": "Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80c679da-3dc0-45bc-95b1-fdd087e120f3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"access_token should exist\", function () {",
											"    pm.expect(pm.environment.has('access_token')).to.equal(true);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd1846ae-d083-427b-8ca0-525a6a292f7a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "The Forge app client ID",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"description": "The Forge app client secret",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{scope}}",
											"description": "The Forge scope",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/authentication/v1/authenticate",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"authentication",
										"v1",
										"authenticate"
									]
								},
								"description": "Endpoint used to request a bearer token"
							},
							"response": []
						}
					],
					"description": "A folder to store all endpoints used for two-legged oAuth flows.",
					"auth": {
						"type": "noauth"
					},
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Three Legged",
					"item": [
						{
							"name": "Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19eede08-7b5f-41fa-918b-fa88c3ae1c3c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJIUzI1NiIsImtpZCI6Imp3dF9zeW1tZXRyaWNfa2V5In0.eyJzY29wZSI6WyJkYXRhOnJlYWQiLCJkYXRhOmNyZWF0ZSIsImRhdGE6d3JpdGUiXSwiY2xpZW50X2lkIjoiSW8xSHM0T2s1dkVLUFlTbTBPQzVBNGpKQWlDQlRxeDUiLCJncmFudF9pZCI6InlycmZ2aHptU3NaNXVxcG52bFZ6QWJmVHQycHlMOTE0IiwiYXVkIjoiaHR0cHM6Ly9hdXRvZGVzay5jb20vYXVkL2p3dGV4cDYwIiwianRpIjoiQzA1NmVmblc4RWwweGViRGxvdGk1VE10anNnNklsUzR0em9rdjljdFZwdWZidjRjbU1Rb1JUeldFSnRsSmdQMCIsInVzZXJpZCI6IktBUURNNjJUNlJVUiIsImV4cCI6MTU5MTg5MTA0MH0.IZKvUCPSNJOWp5mcONg1Y0Qpz8DrZNDAAgpC4cOnY9A",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/userprofile/v1/users/@me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"userprofile",
										"v1",
										"users",
										"@me"
									]
								}
							},
							"response": []
						}
					],
					"description": "A folder to store all endpoints used for two-legged oAuth flows.",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f119041-e947-4a5e-adf3-898011f4ab10",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d6ca13be-1151-4b95-bf38-477b367a1a39",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "A folder to stores all the endpoints that pertain to authentication with the Forge platform.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "11f7a42e-f69a-4fb9-a55b-8d1aa68985ad",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6840e2e1-352e-44a7-9ca1-af6a9fe7a9a5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Copy From",
			"item": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Download Linked Files",
			"item": [
				{
					"name": "Hubs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ec5ec71-a604-4fa1-8135-96fc46dc2a8c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"hub_id and hub_name should exist\", function () {",
									"    pm.expect(pm.environment.has('hub_id')).to.equal(true);",
									"    pm.expect(pm.environment.has('hub_name')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(hub) {",
									"        pm.environment.set(\"hub_id\", hub.id);",
									"        return hub.attributes.name === pm.environment.get(\"hub_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hub Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d748c7f-89d7-42b8-b471-9238b444de48",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"project_id and project_name should exist\", function () {",
									"    pm.expect(pm.environment.has('project_id')).to.equal(true);",
									"    pm.expect(pm.environment.has('project_name')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(project) {",
									"        pm.environment.set(\"project_id\", project.id);",
									"        return project.attributes.name === pm.environment.get(\"project_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects"
							],
							"variable": [
								{
									"key": "hub_id",
									"value": "{{hub_id}}"
								}
							]
						},
						"description": "Retrieves the hub projects."
					},
					"response": []
				},
				{
					"name": "Project Top Folders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4551313e-c48d-4c86-a993-cfdf084d40ec",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"project_files_folder_id should exist\", function () {",
									"    pm.expect(pm.environment.has('project_files_folder_id')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(folder) {",
									"        pm.environment.set(\"project_files_folder_id\", folder.id);",
									"        return folder.attributes.name === 'Project Files';",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects/:project_id/topFolders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects",
								":project_id",
								"topFolders"
							],
							"variable": [
								{
									"key": "hub_id",
									"value": "{{hub_id}}"
								},
								{
									"key": "project_id",
									"value": "{{project_id}}"
								}
							]
						},
						"description": "Retrieves the project top folders."
					},
					"response": []
				},
				{
					"name": "Project Files Folder Contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4157038f-2340-4e0a-9856-4f32fb16cac8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"arch_folder_id and arch_folder_name should exist\", function () {",
									"    pm.expect(pm.environment.has(\"arch_folder_id\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"arch_folder_name\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(folder) {",
									"        pm.environment.set(\"arch_folder_id\", folder.id);",
									"        return folder.attributes.name === pm.environment.get(\"arch_folder_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/folders/:folder_id/contents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"folders",
								":folder_id",
								"contents"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								},
								{
									"key": "folder_id",
									"value": "{{project_files_folder_id}}"
								}
							]
						},
						"description": "Retrieves the Project Files folder contents."
					},
					"response": []
				},
				{
					"name": "Project Folder Contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c170d5ee-c8f4-4d1e-8dc0-9085d0244d86",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"arch_model_object_id and arch_model_version_id should exist\", function () {",
									"    pm.expect(pm.environment.has(\"arch_model_object_id\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"arch_model_version_id\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.included.some(function(version) {",
									"        pm.environment.set(\"arch_model_object_id\", version.relationships.storage.data.id);",
									"        pm.environment.set(\"arch_model_version_id\", version.id);",
									"        return version.attributes.name === pm.environment.get(\"arch_file_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/folders/:folder_id/contents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"folders",
								":folder_id",
								"contents"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								},
								{
									"key": "folder_id",
									"value": "{{arch_folder_id}}"
								}
							]
						},
						"description": "Retrieves a folder contents."
					},
					"response": []
				},
				{
					"name": "Download Parent File",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "990959fd-323e-48ce-ba9d-50bc9636c4ef",
								"exec": [
									"var objectId = pm.environment.get(\"arch_model_object_id\");",
									"var object = objectId.split(\"/\");",
									"var objectName = object[1];",
									"pm.environment.set(\"arch_model_object_name\", objectName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d150999-552c-4b31-ab84-42b2e56a5555",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/oss/v2/buckets/:bucket_key/objects/:object_name",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"oss",
								"v2",
								"buckets",
								":bucket_key",
								"objects",
								":object_name"
							],
							"variable": [
								{
									"key": "bucket_key",
									"value": "{{bucket_key}}"
								},
								{
									"key": "object_name",
									"value": "{{arch_model_object_name}}"
								}
							]
						},
						"description": "Initiate a download of a file."
					},
					"response": []
				},
				{
					"name": "Relationships Refs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "af00c7b2-a338-4279-af43-0910dacfaa79",
								"exec": [
									"var encoded = encodeURIComponent(postman.getEnvironmentVariable(\"arch_model_version_id\"));",
									"postman.setEnvironmentVariable(\"encoded_arch_model_version_id\", encoded);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cb88f64c-6c7c-4b75-850d-4b79078736a7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"xrefs and xref_index should exist\", function () {",
									"    pm.expect(pm.environment.has(\"xref_index\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"xrefs\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    const xrefs = [];",
									"    jsonData.data.some(function(version) {",
									"        jsonData.included.some(function(object) {",
									"            if (object.type === 'versions' && version.id === object.id) {",
									"                xrefs.push({",
									"                    \"file_name\": object.attributes.name,",
									"                    \"object_id\": object.relationships.storage.data.id,",
									"                    \"object_name\": object.relationships.storage.data.id.split(\"/\")[1]",
									"                });",
									"            }",
									"        });",
									"    });",
									"    pm.environment.set(\"xrefs\", JSON.stringify(xrefs));",
									"    pm.environment.set(\"xref_index\", 0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/versions/:version_id/relationships/refs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"versions",
								":version_id",
								"relationships",
								"refs"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								},
								{
									"key": "version_id",
									"value": "{{encoded_arch_model_version_id}}"
								}
							]
						},
						"description": "This endpoint is used to retrieve custom relationship references for a specific item version. \n\nThe response contains a data array of versions for each reference found."
					},
					"response": []
				},
				{
					"name": "Download Linked File",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "820f6815-7e84-4464-af97-708574eb6e3e",
								"exec": [
									"var xrefs = JSON.parse(pm.variables.get(\"xrefs\"));",
									"var index = parseInt(pm.variables.get(\"xref_index\"));",
									"pm.variables.set(\"xref_object_name\", xrefs[index].object_name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9d9b549-531b-48ce-b173-8093fdfe0e6f",
								"exec": [
									"// If we are *not* on the last xref in the list,",
									"// increment the index and set the next request ",
									"// back to this one. Otherwise end the loop",
									"var xrefs = JSON.parse(pm.variables.get(\"xrefs\"));",
									"var index = parseInt(pm.variables.get(\"xref_index\"));",
									"if (index + 1 < xrefs.length){",
									"    pm.variables.set(\"xref_index\", index + 1);",
									"    postman.setNextRequest('Download Linked File');",
									"} else {",
									"    postman.setNextRequest(null)",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							},
							{
								"key": "xrefs",
								"type": "text",
								"value": "{{xrefs}}"
							},
							{
								"key": "xref_index",
								"type": "text",
								"value": "{{xref_index}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/oss/v2/buckets/:bucket_key/objects/:object_name",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"oss",
								"v2",
								"buckets",
								":bucket_key",
								"objects",
								":object_name"
							],
							"variable": [
								{
									"key": "bucket_key",
									"value": "{{bucket_key}}"
								},
								{
									"key": "object_name",
									"value": "{{xref_object_name}}"
								}
							]
						},
						"description": "Initiate a download of a file.\n\nWe are passing into the request additional custom headers xrefs and xref_index. These will be read by the Newman script to determine filenames of the downloaded linked files."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Download Published File",
			"item": [
				{
					"name": "Hubs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19e0b93e-f3d8-4f99-8433-3c6de2f8e518",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"hub_id and hub_name should exist\", function () {",
									"    pm.expect(pm.environment.has('hub_id')).to.equal(true);",
									"    pm.expect(pm.environment.has('hub_name')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(hub) {",
									"        pm.environment.set(\"hub_id\", hub.id);",
									"        return hub.attributes.name === pm.environment.get(\"hub_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hub Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "626143a3-e452-4c4d-aade-59fc1cd69cb8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"project_id and project_name should exist\", function () {",
									"    pm.expect(pm.environment.has('project_id')).to.equal(true);",
									"    pm.expect(pm.environment.has('project_name')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(project) {",
									"        pm.environment.set(\"project_id\", project.id);",
									"        return project.attributes.name === pm.environment.get(\"project_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{x_user_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects"
							],
							"variable": [
								{
									"key": "hub_id",
									"value": "{{hub_id}}"
								}
							]
						},
						"description": "Retrieves the hub projects."
					},
					"response": []
				},
				{
					"name": "Project Top Folders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c136d284-26e9-488f-a21b-ced22b459237",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"project_files_folder_id should exist\", function () {",
									"    pm.expect(pm.environment.has('project_files_folder_id')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(folder) {",
									"        pm.environment.set(\"project_files_folder_id\", folder.id);",
									"        return folder.attributes.name === 'Project Files';",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{x_user_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects/:project_id/topFolders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects",
								":project_id",
								"topFolders"
							],
							"variable": [
								{
									"key": "hub_id",
									"value": "{{hub_id}}"
								},
								{
									"key": "project_id",
									"value": "{{project_id}}"
								}
							]
						},
						"description": "Retrieves the project top folders."
					},
					"response": []
				},
				{
					"name": "Project Files Folder Contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf623177-2d30-4667-99d8-4bade9e5767e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"arch_folder_id and arch_folder_name should exist\", function () {",
									"    pm.expect(pm.environment.has(\"arch_folder_id\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"arch_folder_name\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(folder) {",
									"        pm.environment.set(\"arch_folder_id\", folder.id);",
									"        return folder.attributes.name === pm.environment.get(\"arch_folder_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/folders/:folder_id/contents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"folders",
								":folder_id",
								"contents"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								},
								{
									"key": "folder_id",
									"value": "{{project_files_folder_id}}"
								}
							]
						},
						"description": "Retrieves the Project Files folder contents."
					},
					"response": []
				},
				{
					"name": "Project Folder Contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f626933c-d87d-4ee4-9da3-e496be6bd265",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"arch_model_object_id and arch_model_version_id should exist\", function () {",
									"    pm.expect(pm.environment.has(\"arch_model_object_id\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"arch_model_version_id\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.included.some(function(version) {",
									"        pm.environment.set(\"arch_model_object_id\", version.relationships.storage.data.id);",
									"        pm.environment.set(\"arch_model_version_id\", version.id);",
									"        return version.attributes.name === pm.environment.get(\"arch_file_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{x_user_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/folders/:folder_id/contents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"folders",
								":folder_id",
								"contents"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								},
								{
									"key": "folder_id",
									"value": "{{arch_folder_id}}"
								}
							]
						},
						"description": "Retrieves a folder contents."
					},
					"response": []
				},
				{
					"name": "Download File",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "77b427e0-4963-475f-9415-747a848ed884",
								"exec": [
									"var objectId = pm.environment.get(\"arch_model_object_id\");",
									"var object = objectId.split(\"/\");",
									"var objectName = object[1];",
									"pm.environment.set(\"arch_model_object_name\", objectName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd5be2ad-1166-4efd-9cbd-7ff5fc85b2ff",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/oss/v2/buckets/:bucket_key/objects/:object_name",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"oss",
								"v2",
								"buckets",
								":bucket_key",
								"objects",
								":object_name"
							],
							"variable": [
								{
									"key": "bucket_key",
									"value": "{{bucket_key}}"
								},
								{
									"key": "object_name",
									"value": "{{arch_model_object_name}}"
								}
							]
						},
						"description": "Initiate a download of a file."
					},
					"response": []
				}
			],
			"description": "Collection of endpoints needed to successfully download a published Revit model with linked files from BIM360 Docs.\n\nThe download object is a compressed archive that contains all the Revit model files. ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "312fbaf5-2895-4c8d-a7f1-a4db652eca41",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e460e7b5-99bb-494e-9004-e31880e9be84",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Project Setup",
			"item": [
				{
					"name": "Hubs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ec36f68-a548-4d79-8537-3e3ffe054e77",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"hub_id and hub_name should exist\", function () {",
									"    pm.expect(pm.environment.has('hub_id')).to.equal(true);",
									"    pm.expect(pm.environment.has('hub_name')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(hub) {",
									"        pm.environment.set(\"hub_id\", hub.id);",
									"        return hub.attributes.name === pm.environment.get(\"hub_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Business Units",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8d1493d6-4ea9-4ea8-bfbc-dd88bd6e2de4",
								"exec": [
									"var account_id = pm.environment.get(\"hub_id\");",
									"account_id = account_id.replace(\"b.\", \"\");",
									"pm.environment.set(\"account_id\", account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a31c93a-b702-426f-845b-e2b84ccc0c53",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"business_unit_id and business_unit_name should exist\", function () {",
									"    pm.expect(pm.environment.has(\"business_unit_id\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"business_unit_name\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.business_units.some(function(unit) {",
									"        pm.environment.set(\"business_unit_id\", unit.id);",
									"        return unit.name === pm.environment.get(\"business_unit_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/hq/v1/accounts/:account_id/business_units_structure",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"hq",
								"v1",
								"accounts",
								":account_id",
								"business_units_structure"
							],
							"variable": [
								{
									"key": "account_id",
									"value": "{{account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00e563f2-ace7-4209-a232-babb91ab101a",
								"exec": [
									"var account_id = pm.environment.get(\"hub_id\");",
									"account_id = account_id.replace(\"b.\", \"\");",
									"pm.environment.set(\"account_id\", account_id);",
									"",
									"var construction_type = pm.environment.get(\"construction_type\");",
									"var construction_types = [\"New Construction\", \"Renovation\"];",
									"if (!construction_types.includes(construction_type)) {",
									"    throw new Error(\"unknown construction type\");",
									"}",
									"",
									"var contract_type = pm.environment.get(\"contract_type\");",
									"var contract_types = [\"Construction Management (CM) at Risk\", \"Design-Bid\", \"Design-Bid-Build\", \"Design-Build-Operate\", \"IPD\"];",
									"if (!contract_types.includes(contract_type)) {",
									"    throw new Error(\"unknown contract type\");",
									"}",
									"",
									"var currency = pm.environment.get(\"currency\");",
									"var currencies = [\"USD\", \"AUD\", \"CAD\", \"EUR\", \"GBP\", \"ALL\", \"AZN\", \"BYR\", \"BRL\", \"BGN\",\"CNY\", \"HRK\", \"CZK\", \"DKK\", \"EEK\",\"HKD\", \"HUF\", \"ISK\", \"INR\", \"IRR\", \"ILS\", \"JPY\", \"KZT\", \"KRW\",\"KPW\", \"KGS\", \"LVL\", \"LTL\", \"MKD\", \"MNT\", \"ANG\", \"NOK\", \"PKR\", \"PLN\", \"RON\", \"RUB\", \"SAR\", \"RSD\", \"SGD\", \"ZAR\", \"SEK\", \"CHF\", \"TWD\", \"TRL\", \"UAH\", \"UZS\", \"YER\", \"PHP\", \"NZD\"];",
									"if (!currencies.includes(currency)) {",
									"    throw new Error(\"unknown currency\");",
									"}",
									"",
									"var project_type = pm.environment.get(\"project_type\");",
									"var project_types = [\"Commercial\", \"Convention Center\", \"Data Center\", \"Hotel / Motel\", \"Office\", \"Parking Structure / Garage\", \"Performing Arts\", \"Retail\", \"Stadium/Arena\", \"Theme Park\", \"Warehouse (non-manufacturing)\", \"Healthcare\", \"Assisted Living / Nursing Home\", \"Hospital\", \"Medical Laboratory\", \"Medical Office\", \"OutPatient Surgery Center\", \"Institutional\", \"Court House\", \"Dormitory\", \"Education Facility\", \"Government Building\", \"Library\", \"Military Facility\", \"Museum\", \"Prison / Correctional Facility\", \"Recreation Building\", \"Religious Building\", \"Research Facility / Laboratory\", \"Residential\", \"Multi-Family Housing\", \"Single-Family Housing\", \"Infrastructure\", \"Airport\", \"Bridge\", \"Canal / Waterway\", \"Dams / Flood Control / Reservoirs\", \"Harbor / River Development\", \"Rail\", \"Seaport\", \"Streets / Roads / Highways\", \"Transportation Building\", \"Tunnel\", \"Waste Water / Sewers\", \"Water Supply\", \"Industrial & Energy\", \"Manufacturing / Factory\", \"Oil & Gas\", \"Plant\", \"Power Plant\", \"Solar Far\", \"Utilities\", \"Wind Farm\", \"Sample Projects\", \"Demonstration Project\", \"Template Project\", \"Training Project\"];",
									"if (!project_types.includes(project_type)) {",
									"    throw new Error(\"unknown project type\");",
									"}",
									"",
									"var service_type = pm.environment.get(\"service_type\");",
									"var service_types = [\"field\", \"glue\", \"schedule\", \"plan\", \"doc_manager\"];",
									"if (!service_types.includes(service_type)) {",
									"    throw new Error(\"unknown service type\");",
									"}",
									"",
									"var timezone = pm.environment.get(\"timezone\");",
									"var timezones = [\"Pacific/Honolulu\", \"America/Juneau\", \"America/Los_Angeles\", \"America/Phoenix\", \"America/Denver\", \"America/Chicago\", \"America/New_York\", \"America/Indiana/Indianapolis\", \"Pacific/Pago_Pago\", \"Pacific/Midway\", \"America/Tijuana\", \"America/Chihuahua\", \"America/Mazatlan\", \"America/Guatemala\", \"America/Mexico_City\", \"America/Monterrey\", \"America/Regina\", \"America/Bogota\", \"America/Lima\", \"America/Caracas\", \"America/Halifax\", \"America/Guyana\", \"America/La_Paz\", \"America/Santiago\", \"America/St_Johns\", \"America/Sao_Paulo\", \"America/Argentina/Buenos_Aires\", \"America/Godthab\", \"Atlantic/South_Georgia\", \"Atlantic/Azores\", \"Atlantic/Cape_Verde\", \"Africa/Casablanca\", \"Europe/Dublin\", \"Europe/Lisbon\", \"Europe/London\", \"Africa/Monrovia\", \"ETC/UTC\", \"Europe/Amsterdam\", \"Europe/Belgrade\", \"Europe/Berlin\", \"Europe/Bratislava\", \"Europe/Brussels\", \"Europe/Budapest\", \"Europe/Copenhagen\", \"Europe/Ljubljana\", \"Europe/Madrid\", \"Europe/Paris\", \"Europe/Prague\", \"Europe/Rome\", \"Europe/Sarajevo\", \"Europe/Skopje\", \"Europe/Stockholm\", \"Europe/Vienna\", \"Europe/Warsaw\", \"Africa/Algiers\", \"Europe/Zagreb\", \"Europe/Athens\", \"Europe/Bucharest\", \"Africa/Cairo\", \"Africa/Harare\", \"Europe/Helsinki\", \"Europe/Istanbul\", \"Asia/Jerusalem\", \"Europe/Kiev\", \"Africa/Johannesburg\", \"Europe/Riga\", \"Europe/Sofia\", \"Europe/Tallinn\", \"Europe/Vilnius\", \"Asia/Baghdad\", \"Asia/Kuwait\", \"Europe/Minsk\", \"Africa/Nairobi\", \"Asia/Riyadh\", \"Asia/Tehran\", \"Asia/Muscat\", \"Asia/Baku\", \"Europe/Moscow\", \"Asia/Tbilisi\", \"Asia/Yerevan\", \"Asia/Kabul\", \"Asia/Karachi\", \"Asia/Tashkent\", \"Asia/Kolkata\", \"Asia/Colombo\", \"Asia/Kathmandu\", \"Asia/Almaty\", \"Asia/Dhaka\", \"Asia/Yekaterinburg\", \"Asia/Rangoon\", \"Asia/Bangkok\", \"Asia/Jakarta\", \"Asia/Novosibirsk\", \"Asia/Shanghai\", \"Asia/Chongqing\", \"Asia/Hong_Kong\", \"Asia/Krasnoyarsk\", \"Asia/Kuala_Lumpur\", \"Australia/Perth\", \"Asia/Singapore\", \"Asia/Taipei\", \"Asia/Ulaanbaatar\", \"Asia/Urumqi\", \"Asia/Irkutsk\",\"Asia/Tokyo\", \"Asia/Seoul\", \"Australia/Adelaide\", \"Australia/Darwin\", \"Australia/Brisbane\", \"Australia/Melbourne\", \"Pacific/Guam\", \"Australia/Hobart\", \"Pacific/Port_Moresby\", \"Australia/Sydney\", \"Asia/Yakutsk\", \"Pacific/Noumea\", \"Asia/Vladivostok\", \"Pacific/Auckland\", \"Pacific/Fiji\", \"Asia/Kamchatka\", \"Asia/Magadan\", \"Pacific/Majurov\", \"Pacific/Guadalcanal\", \"Pacific/Tongatapu\", \"Pacific/Apia\", \"Pacific/Fakaofo\"];",
									"if (!timezones.includes(timezone)) {",
									"    throw new Error(\"unknown timezone\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "38ab0eca-93f2-42ea-97cd-425063ff4a5d",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"project_id should exist\", function () {",
									"    pm.expect(pm.environment.has(\"project_id\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"project_id\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{project_name}}\",\n    \"service_types\": \"{{service_type}}\",\n    \"start_date\": \"2015-05-02\",\n    \"end_date\": \"2016-04-03\",\n    \"project_type\": \"{{project_type}}\",\n    \"value\": 3000,\n    \"currency\": \"{{currency}}\",\n    \"job_number\": \"0219-01\",\n    \"address_line_1\": \"The Fifth Avenue\",\n    \"address_line_2\": \"#301\",\n    \"city\": \"New York\",\n    \"state_or_province\": \"New York\",\n    \"postal_code\": \"10011\",\n    \"country\": \"United States\",\n    \"business_unit_id\": \"{{business_unit_id}}\",\n    \"timezone\": \"{{timezone}}\",\n    \"language\": \"en\",\n    \"construction_type\": \"{{construction_type}}\",\n    \"contract_type\": \"{{contract_type}}\",\n    \"template_project_id\": \"{{project_id}}\",\n    \"include_companies\": \"true\",\n    \"include_locations\": \"false\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/hq/v1/accounts/:account_id/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"hq",
								"v1",
								"accounts",
								":account_id",
								"projects"
							],
							"variable": [
								{
									"key": "account_id",
									"value": "{{account_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Companies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dd41cd4-2b4c-4922-ab56-2e44dd46118a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"company_id and company_name should exist\", function () {",
									"    pm.expect(pm.environment.has(\"company_id\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"company_name\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.some(function(company) {",
									"        pm.environment.set(\"company_id\", company.id);",
									"        return company.name === pm.environment.get(\"company_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/hq/v1/accounts/:account_id/companies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"hq",
								"v1",
								"accounts",
								":account_id",
								"companies"
							],
							"variable": [
								{
									"key": "account_id",
									"value": "{{hub_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Project Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ccb3ead-62ac-4982-a77d-9d11d14c2ef5",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service_type\": \"{{service_type}}\",\n    \"company_id\":\"{{company_id}}\",\n    \"email\":\"bastien.mazeran@autodesk.com\",\n    \"nickname\":\"Bastien\",\n    \"first_name\":\"Bastien\",\n    \"last_name\":\"Mazeran\",\n    \"role\": \"project_admin\",\n    \"image_url\": \"http://static-dc.autodesk.net/etc/designs/v201412151200/autodesk/adsk-design/images/autodesk_header_logo_140x23.png\",\n    \"address_line_1\": \"The Fifth Avenue\",\n    \"address_line_2\": \"#301\",\n    \"city\": \"New York\",\n    \"postal_code\": \"10011\",\n    \"state_or_province\": \"New York\",\n    \"country\": \"United States\",\n    \"phone\": \"(634)329-2353\",\n    \"company\": \"Autodesk\",\n    \"job_title\": \"Software Developer\",\n    \"industry\": \"IT\",\n    \"about_me\": \"Nothing here\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/hq/v1/accounts/:account_id/projects/:project_id/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"hq",
								"v1",
								"accounts",
								":account_id",
								"projects",
								":project_id",
								"users"
							],
							"variable": [
								{
									"key": "account_id",
									"value": "{{hub_id}}"
								},
								{
									"key": "project_id",
									"value": "{{project_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Upload Linked Files (Beta)",
			"item": [
				{
					"name": "Hubs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41fb75f1-d3da-4476-a412-3e8a10fc2784",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"hub_id and hub_name should exist\", function () {",
									"    pm.expect(pm.environment.has('hub_id')).to.equal(true);",
									"    pm.expect(pm.environment.has('hub_name')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(hub) {",
									"        pm.environment.set(\"hub_id\", hub.id);",
									"        return hub.attributes.name === pm.environment.get(\"hub_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hub Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91945f35-95ad-4797-8273-fb3bf3aa1114",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"project_id and project_name should exist\", function () {",
									"    pm.expect(pm.environment.has('project_id')).to.equal(true);",
									"    pm.expect(pm.environment.has('project_name')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(project) {",
									"        pm.environment.set(\"project_id\", project.id);",
									"        return project.attributes.name === pm.environment.get(\"project_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects"
							],
							"variable": [
								{
									"key": "hub_id",
									"value": "{{hub_id}}"
								}
							]
						},
						"description": "Retrieves the hub projects."
					},
					"response": []
				},
				{
					"name": "Project Top Folders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dcf709b-f69b-42fb-8b73-5ce3069be6a2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"project_files_folder_id should exist\", function () {",
									"    pm.expect(pm.environment.has('project_files_folder_id')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(folder) {",
									"        pm.environment.set(\"project_files_folder_id\", folder.id);",
									"        return folder.attributes.name === 'Project Files';",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects/:project_id/topFolders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects",
								":project_id",
								"topFolders"
							],
							"variable": [
								{
									"key": "hub_id",
									"value": "{{hub_id}}"
								},
								{
									"key": "project_id",
									"value": "{{project_id}}"
								}
							]
						},
						"description": "Retrieves the project top folders."
					},
					"response": []
				},
				{
					"name": "Project Files Folder Contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4a39e92-e8ad-4147-bb79-11e75f1a8c31",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"upload_folder_id and upload_folder_name should exist\", function () {",
									"    pm.expect(pm.environment.has(\"upload_folder_id\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"upload_folder_name\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(folder) {",
									"        pm.environment.set(\"upload_folder_id\", folder.id);",
									"        return folder.attributes.name === pm.environment.get(\"upload_folder_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/folders/:folder_id/contents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"folders",
								":folder_id",
								"contents"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								},
								{
									"key": "folder_id",
									"value": "{{project_files_folder_id}}"
								}
							]
						},
						"description": "Retrieves the Project Files folder contents."
					},
					"response": []
				},
				{
					"name": "Create Storage Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1238ae42-2f37-4553-a935-d2315111f326",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"upload_model_object_id\", jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d32406a9-b169-4890-ac94-d85092d4f62f",
								"exec": [
									"var file_name = pm.iterationData.get(\"name\");",
									"pm.environment.set(\"upload_file_name\", file_name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonapi\": {\n        \"version\": \"1.0\"\n    },\n    \"data\": {\n        \"type\": \"objects\",\n        \"attributes\": {\n            \"name\": \"{{upload_file_name}}\"\n        },\n        \"relationships\": {\n            \"target\": {\n                \"data\": {\n                    \"type\": \"folders\",\n                    \"id\": \"{{upload_folder_id}}\"\n                }\n            }\n        }\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/storage",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"storage"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								}
							]
						},
						"description": "Creates a new storage location to upload a new file to."
					},
					"response": []
				},
				{
					"name": "Upload File",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53466b0d-0d0f-4172-8c76-0d9629367c21",
								"exec": [
									"var objectId = pm.environment.get(\"upload_model_object_id\");",
									"var object = objectId.split(\"/\");",
									"var objectName = object[1];",
									"pm.environment.set(\"upload_model_object_name\", objectName);",
									"",
									"var filePath = pm.iterationData.get(\"path\");",
									"pm.environment.set(\"src_file_path\", filePath);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "26686339-7aa6-4c10-9119-4d07287ea032",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mode\": \"file\",\n    \"file\":\"{{src_file_path}}/{{upload_file_name}}\"\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/oss/v2/buckets/:bucket_key/objects/:object_name",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"oss",
								"v2",
								"buckets",
								":bucket_key",
								"objects",
								":object_name"
							],
							"variable": [
								{
									"key": "bucket_key",
									"value": "{{bucket_key}}"
								},
								{
									"key": "object_name",
									"value": "{{upload_model_object_name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create First Version",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4610b6ee-4c19-497b-bb5f-e5dbc9c81bba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8372763e-f35f-4aa1-ae37-b18c267c0e23",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.api+json"
							},
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonapi\": { \n        \"version\": \"1.0\"\n    },\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"displayName\": \"{{upload_file_name}}\",\n            \"extension\": {\n                \"type\": \"items:autodesk.bim360:File\",\n                \"version\": \"1.0\"\n            }\n        },\n        \"relationships\": {\n            \"tip\": {\n                \"data\": {\n                    \"type\": \"versions\",\n                    \"id\": \"1\"\n                }\n            },\n            \"parent\": {\n                \"data\": {\n                    \"type\": \"folders\",\n                    \"id\": \"{{upload_folder_id}}\"\n                }\n            }\n        }\n    },\n    \"included\": [\n        {\n            \"type\": \"versions\",\n            \"id\": \"1\",\n            \"attributes\": {\n                \"name\": \"{{upload_file_name}}\",\n                \"extension\": {\n                    \"type\": \"versions:autodesk.bim360:File\",\n                    \"version\": \"1.0\"\n                }\n            },\n            \"relationships\": {\n                \"storage\": {\n                    \"data\": {\n                        \"type\": \"objects\",\n                        \"id\": \"{{upload_model_object_id}}\"\n                    }\n                }\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"items"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Upload Single File",
			"item": [
				{
					"name": "Hubs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd07c759-d8b2-41e2-92fe-7d3d121a0da5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"hub_id and hub_name should exist\", function () {",
									"    pm.expect(pm.environment.has('hub_id')).to.equal(true);",
									"    pm.expect(pm.environment.has('hub_name')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(hub) {",
									"        pm.environment.set(\"hub_id\", hub.id);",
									"        return hub.attributes.name === pm.environment.get(\"hub_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hub Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05a2cee3-b0ea-43e6-9d60-d0c3b587042e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"project_id and project_name should exist\", function () {",
									"    pm.expect(pm.environment.has('project_id')).to.equal(true);",
									"    pm.expect(pm.environment.has('project_name')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(project) {",
									"        pm.environment.set(\"project_id\", project.id);",
									"        return project.attributes.name === pm.environment.get(\"project_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects"
							],
							"variable": [
								{
									"key": "hub_id",
									"value": "{{hub_id}}"
								}
							]
						},
						"description": "Retrieves the hub projects."
					},
					"response": []
				},
				{
					"name": "Project Top Folders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55b47253-bd3f-4e35-a380-69f133eb05a9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"project_files_folder_id should exist\", function () {",
									"    pm.expect(pm.environment.has('project_files_folder_id')).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(folder) {",
									"        pm.environment.set(\"project_files_folder_id\", folder.id);",
									"        return folder.attributes.name === 'Project Files';",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/project/v1/hubs/:hub_id/projects/:project_id/topFolders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								":hub_id",
								"projects",
								":project_id",
								"topFolders"
							],
							"variable": [
								{
									"key": "hub_id",
									"value": "{{hub_id}}"
								},
								{
									"key": "project_id",
									"value": "{{project_id}}"
								}
							]
						},
						"description": "Retrieves the project top folders."
					},
					"response": []
				},
				{
					"name": "Project Files Folder Contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a668241e-17dd-4ed5-a59e-52270622efe0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"upload_folder_id and upload_folder_name should exist\", function () {",
									"    pm.expect(pm.environment.has(\"upload_folder_id\")).to.equal(true);",
									"    pm.expect(pm.environment.has(\"upload_folder_name\")).to.equal(true);",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.some(function(folder) {",
									"        pm.environment.set(\"upload_folder_id\", folder.id);",
									"        return folder.attributes.name === pm.environment.get(\"upload_folder_name\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/folders/:folder_id/contents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"folders",
								":folder_id",
								"contents"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								},
								{
									"key": "folder_id",
									"value": "{{project_files_folder_id}}"
								}
							]
						},
						"description": "Retrieves the Project Files folder contents."
					},
					"response": []
				},
				{
					"name": "Create Storage Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fa163ce-812b-40bc-a5e4-a863a2e17973",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"upload_model_object_id\", jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5e1536a2-02b5-46a1-9a97-f57e4f5718e3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonapi\": {\n        \"version\": \"1.0\"\n    },\n    \"data\": {\n        \"type\": \"objects\",\n        \"attributes\": {\n            \"name\": \"{{upload_file_name}}\"\n        },\n        \"relationships\": {\n            \"target\": {\n                \"data\": {\n                    \"type\": \"folders\",\n                    \"id\": \"{{upload_folder_id}}\"\n                }\n            }\n        }\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/storage",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"storage"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								}
							]
						},
						"description": "Creates a new storage location to upload a new file to."
					},
					"response": []
				},
				{
					"name": "Upload File",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "922bfaa7-9101-44cf-810c-b88a3c10e0bf",
								"exec": [
									"var objectId = pm.environment.get(\"upload_model_object_id\");",
									"var object = objectId.split(\"/\");",
									"var objectName = object[1];",
									"pm.environment.set(\"upload_model_object_name\", objectName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d74e5d10-5813-4304-9d80-b3396049bcb4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"value": "attachment; filename=\"{{upload_file_name}}\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/Users/mazerab/Repos/bim360-automation-postman/assets/models/visualization_-_condominium_with_skylight.dwg"
							},
							"options": {
								"file": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/oss/v2/buckets/:bucket_key/objects/:object_name",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"oss",
								"v2",
								"buckets",
								":bucket_key",
								"objects",
								":object_name"
							],
							"variable": [
								{
									"key": "bucket_key",
									"value": "{{bucket_key}}"
								},
								{
									"key": "object_name",
									"value": "{{upload_model_object_name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create First Version",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "795d25f9-90b1-444f-b025-b2bc817016d7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a716433-0b44-4d8e-947d-519679feb17b",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.api+json"
							},
							{
								"key": "x-user-id",
								"type": "text",
								"value": "{{x_user_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonapi\": { \n        \"version\": \"1.0\"\n    },\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"displayName\": \"{{upload_file_name}}\",\n            \"extension\": {\n                \"type\": \"items:autodesk.bim360:File\",\n                \"version\": \"1.0\"\n            }\n        },\n        \"relationships\": {\n            \"tip\": {\n                \"data\": {\n                    \"type\": \"versions\",\n                    \"id\": \"1\"\n                }\n            },\n            \"parent\": {\n                \"data\": {\n                    \"type\": \"folders\",\n                    \"id\": \"{{upload_folder_id}}\"\n                }\n            }\n        }\n    },\n    \"included\": [\n        {\n            \"type\": \"versions\",\n            \"id\": \"1\",\n            \"attributes\": {\n                \"name\": \"{{upload_file_name}}\",\n                \"extension\": {\n                    \"type\": \"versions:autodesk.bim360:File\",\n                    \"version\": \"1.0\"\n                }\n            },\n            \"relationships\": {\n                \"storage\": {\n                    \"data\": {\n                        \"type\": \"objects\",\n                        \"id\": \"{{upload_model_object_id}}\"\n                    }\n                }\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{base_url}}/data/v1/projects/:project_id/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"v1",
								"projects",
								":project_id",
								"items"
							],
							"variable": [
								{
									"key": "project_id",
									"value": "{{project_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "abe937c6-eae4-4887-8535-60db7cb0e6e8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d959d05e-7a7d-4117-98e9-2ff24372f910",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}